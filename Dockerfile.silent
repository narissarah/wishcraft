# Railway Ultra-Silent Production Dockerfile
# This version completely suppresses all warnings and output

# Stage 1: Silent Build
FROM node:22-slim AS builder

# Install system dependencies silently
RUN apt-get update -qq && apt-get install -y -qq \
    openssl \
    ca-certificates \
    python3 \
    make \
    g++ \
    > /dev/null 2>&1 && \
    rm -rf /var/lib/apt/lists/* > /dev/null 2>&1

# Configure for absolute silence
ENV NODE_ENV=development
ENV CI=false
ENV NODE_NO_WARNINGS=1
ENV NPM_CONFIG_LOGLEVEL=silent
ENV NPM_CONFIG_UPDATE_NOTIFIER=false
ENV NPM_CONFIG_FUND=false
ENV NPM_CONFIG_AUDIT=false
ENV NPM_CONFIG_PROGRESS=false
ENV DISABLE_OPENCOLLECTIVE=true
ENV ADBLOCK=true

WORKDIR /app

# Copy and install with complete silence
COPY package*.json ./
COPY prisma ./prisma/
COPY .npmrc ./

# Install dependencies with maximum suppression
RUN npm ci --silent --no-progress --no-audit --no-fund 2>/dev/null || \
    npm ci --quiet --no-progress --no-audit --no-fund

COPY . .

# Build silently
RUN npx prisma generate --no-hints 2>/dev/null && \
    npm run build 2>/dev/null

# Stage 2: Silent Runtime
FROM node:22-slim AS runtime

# Configure for absolute silence
ENV NODE_ENV=production
ENV PORT=3000
ENV HOST=0.0.0.0
ENV CI=false
ENV NODE_NO_WARNINGS=1
ENV NPM_CONFIG_LOGLEVEL=silent
ENV NPM_CONFIG_UPDATE_NOTIFIER=false
ENV NPM_CONFIG_FUND=false
ENV NPM_CONFIG_AUDIT=false
ENV NPM_CONFIG_PROGRESS=false
ENV DISABLE_OPENCOLLECTIVE=true
ENV ADBLOCK=true

# Install runtime dependencies silently
RUN apt-get update -qq && apt-get install -y -qq \
    openssl \
    ca-certificates \
    curl \
    > /dev/null 2>&1 && \
    rm -rf /var/lib/apt/lists/* > /dev/null 2>&1

WORKDIR /app

# Copy essentials
COPY package*.json ./
COPY prisma ./prisma/
COPY .npmrc ./

# Install production dependencies silently
RUN npm ci --omit=dev --silent --no-progress --no-audit --no-fund 2>/dev/null || \
    npm ci --omit=dev --quiet --no-progress --no-audit --no-fund

# Copy from builder
COPY --from=builder /app/build ./build
COPY --from=builder /app/public ./public
COPY --from=builder /app/app ./app
COPY --from=builder /app/server.js ./server.js
COPY --from=builder /app/server-production.js ./server-production.js
COPY --from=builder /app/node_modules/.prisma ./node_modules/.prisma
COPY --from=builder /app/node_modules/@prisma ./node_modules/@prisma

# Copy configs
COPY shopify.app.toml ./
COPY remix.config.js ./
COPY vite.config.ts ./

# Generate Prisma silently
RUN npx prisma generate --no-hints 2>/dev/null

# Create user silently
RUN groupadd -r -g 1001 nodejs 2>/dev/null && \
    useradd --no-log-init -r -u 1001 -g nodejs -s /bin/sh railway 2>/dev/null

# Set permissions silently
RUN chown -R railway:nodejs /app 2>/dev/null

USER railway
EXPOSE 3000

# Silent health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -sf http://localhost:3000/health > /dev/null || exit 1

# Start with suppressed output
CMD ["sh", "-c", "NODE_NO_WARNINGS=1 node server-production.js 2>&1 | grep -v deprecat | grep -v WARN || true"]