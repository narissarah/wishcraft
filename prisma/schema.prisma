// WishCraft Database Schema - Optimized for 100/100 Shopify Score
generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// CORE SHOPIFY INTEGRATION
// ============================================================================

model Session {
  id          String    @id
  shop        String
  state       String
  isOnline    Boolean   @default(false)
  scope       String?
  expires     DateTime?
  accessToken String
  userId      String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("sessions")
}

model Shop {
  id              String   @id
  domain          String   @unique
  name            String
  email           String?
  currencyCode    String   @default("USD")
  
  settings        ShopSettings?
  registries      Registry[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("shops")
}

model ShopSettings {
  id                    String   @id @default(cuid())
  shopId                String   @unique
  shop                  Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  
  enablePasswordProtection    Boolean @default(true)
  enableGiftMessages         Boolean @default(true)
  enableSocialSharing        Boolean @default(true)
  enableEmailNotifications   Boolean @default(true)
  
  primaryColor              String  @default("#007ace")
  accentColor               String  @default("#f3f3f3")
  
  defaultRegistryVisibility String  @default("public")
  maxItemsPerRegistry       Int     @default(100)
  enableInventoryTracking   Boolean @default(true)
  
  appActive                 Boolean  @default(true)
  appUninstalledAt         DateTime?
  
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  @@map("shop_settings")
}

// ============================================================================
// CORE REGISTRY MODELS
// ============================================================================

model Registry {
  id                String   @id @default(cuid())
  
  title             String
  description       String?
  slug              String   @unique
  status            String   @default("active")
  
  eventType         String   @default("general")
  eventDate         DateTime?
  
  visibility        String   @default("public")
  accessCode        String?
  
  shopId            String
  shop              Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  customerId        String
  customerEmail     String
  customerFirstName String?
  customerLastName  String?
  
  items             RegistryItem[]
  purchases         RegistryPurchase[]
  
  views             Int      @default(0)
  totalValue        Float    @default(0)
  purchasedValue    Float    @default(0)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([shopId])
  @@index([customerId])
  @@index([status])
  @@map("registries")
}

model RegistryItem {
  id                String   @id @default(cuid())
  
  registryId        String
  registry          Registry @relation(fields: [registryId], references: [id], onDelete: Cascade)
  
  productId         String
  variantId         String?
  productHandle     String
  productTitle      String
  variantTitle      String?
  
  productImage      String?
  
  quantity          Int      @default(1)
  quantityPurchased Int      @default(0)
  priority          String   @default("medium")
  notes             String?
  
  price             Float
  compareAtPrice    Float?
  currencyCode      String   @default("USD")
  
  inventoryTracked  Boolean  @default(true)
  inventoryQuantity Int?
  
  status            String   @default("active")
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([registryId])
  @@index([productId])
  @@index([status])
  @@map("registry_items")
}

model RegistryPurchase {
  id                String   @id @default(cuid())
  
  registryId        String
  registry          Registry @relation(fields: [registryId], references: [id], onDelete: Cascade)
  
  orderId           String?
  lineItemId        String?
  orderName         String?
  
  productId         String
  variantId         String?
  quantity          Int
  unitPrice         Float
  totalAmount       Float
  currencyCode      String   @default("USD")
  
  purchaserEmail    String?
  purchaserName     String?
  
  isGift            Boolean  @default(true)
  giftMessage       String?
  
  status            String   @default("pending")
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([registryId])
  @@index([orderId])
  @@index([status])
  @@map("registry_purchases")
}

// ============================================================================
// GDPR COMPLIANCE & AUDIT
// ============================================================================

model AuditLog {
  id                String   @id @default(cuid())
  
  shopId            String?
  userId            String?
  userEmail         String?
  
  action            String
  resource          String
  resourceId        String
  
  metadata          String?
  
  ipAddress         String?
  userAgent         String?
  
  timestamp         DateTime @default(now())

  @@index([shopId])
  @@index([action])
  @@index([timestamp])
  @@map("audit_logs")
}

model SystemJob {
  id                String   @id @default(cuid())
  
  type              String
  status            String   @default("pending")
  priority          Int      @default(5)
  
  payload           String?
  result            String?
  errorMessage      String?
  
  attempts          Int      @default(0)
  maxAttempts       Int      @default(3)
  runAt             DateTime @default(now())
  startedAt         DateTime?
  completedAt       DateTime?
  
  shopId            String?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([status])
  @@index([type])
  @@index([runAt])
  @@map("system_jobs")
}