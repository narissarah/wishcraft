name: Deploy to Production

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and Quality Checks
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=high

      - name: Run dependency check
        uses: ossf/scorecard-action@v2.3.1
        with:
          results_file: scorecard-results.sarif
          results_format: sarif
          publish_results: true

  # Code Quality Checks
  quality-checks:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript check
        run: npm run typecheck

      - name: Run ESLint
        run: npm run lint

      - name: Run tests
        run: npm run test:unit

      - name: Run performance tests
        run: npm run test:performance

      - name: Check bundle size
        run: npm run size

  # Build and Test
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [security-scan, quality-checks]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            build/
            public/
          retention-days: 7

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix=sha-

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Database Migration
  migrate:
    name: Database Migration
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run database migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

  # Deploy to Production
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, migrate]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.deploy.outputs.url }}
    concurrency:
      group: deploy-${{ github.event.inputs.environment || 'production' }}
      cancel-in-progress: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Deploy to Railway
        id: deploy-railway
        if: ${{ vars.DEPLOYMENT_PLATFORM == 'railway' }}
        run: |
          npm install -g @railway/cli
          railway deploy --environment=${{ github.event.inputs.environment || 'production' }}
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Deploy to Render
        id: deploy-render
        if: ${{ vars.DEPLOYMENT_PLATFORM == 'render' }}
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}

      - name: Deploy to Custom Infrastructure
        id: deploy-custom
        if: ${{ vars.DEPLOYMENT_PLATFORM == 'custom' }}
        run: |
          echo "Deploying to custom infrastructure..."
          ./deploy/deploy.sh ${{ github.event.inputs.environment || 'production' }} docker
        env:
          DOCKER_REGISTRY: ${{ env.REGISTRY }}
          IMAGE_TAG: ${{ needs.build.outputs.image-digest }}

      - name: Set deployment URL
        id: deploy
        run: |
          echo "url=${{ vars.APP_URL }}" >> $GITHUB_OUTPUT

  # Post-deployment Health Checks
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: [deploy]
    steps:
      - name: Wait for deployment
        run: sleep 60

      - name: Check application health
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ vars.APP_URL }}/health)
          if [ $response -eq 200 ]; then
            echo "✅ Application health check passed"
          else
            echo "❌ Application health check failed with status: $response"
            exit 1
          fi

      - name: Check database health
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ vars.APP_URL }}/health/db)
          if [ $response -eq 200 ]; then
            echo "✅ Database health check passed"
          else
            echo "❌ Database health check failed with status: $response"
            exit 1
          fi

      - name: Check Shopify API health
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ vars.APP_URL }}/health/shopify)
          if [ $response -eq 200 ]; then
            echo "✅ Shopify API health check passed"
          else
            echo "⚠️ Shopify API health check failed with status: $response"
          fi

      - name: Check performance health
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ vars.APP_URL }}/health/performance)
          if [ $response -eq 200 ]; then
            echo "✅ Performance health check passed"
          else
            echo "⚠️ Performance health check failed with status: $response"
          fi

  # Performance Monitoring
  performance-monitoring:
    name: Setup Performance Monitoring
    runs-on: ubuntu-latest
    needs: [health-check]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Lighthouse audit
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            ${{ vars.APP_URL }}
            ${{ vars.APP_URL }}/registries
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Setup performance alerts
        run: npm run performance:alerts
        env:
          PERFORMANCE_WEBHOOK_URL: ${{ secrets.PERFORMANCE_WEBHOOK_URL }}
          DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}

  # Notification
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy, health-check]
    if: always()
    steps:
      - name: Get deployment status
        id: status
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" && "${{ needs.health-check.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "color=good" >> $GITHUB_OUTPUT
            echo "emoji=🚀" >> $GITHUB_OUTPUT
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "color=danger" >> $GITHUB_OUTPUT
            echo "emoji=❌" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack notification
        if: ${{ vars.SLACK_WEBHOOK_URL }}
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ steps.status.outputs.status }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send Datadog deployment event
        if: ${{ secrets.DATADOG_API_KEY }}
        run: |
          curl -X POST "https://api.datadoghq.com/api/v1/events" \
            -H "Content-Type: application/json" \
            -H "DD-API-KEY: ${{ secrets.DATADOG_API_KEY }}" \
            -d '{
              "title": "WishCraft Deployment",
              "text": "${{ steps.status.outputs.emoji }} Deployed to ${{ github.event.inputs.environment || 'production' }}",
              "tags": [
                "environment:${{ github.event.inputs.environment || 'production' }}",
                "version:${{ github.sha }}",
                "status:${{ steps.status.outputs.status }}"
              ]
            }'